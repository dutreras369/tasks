function validaRut(rut) {
  // Eliminar puntos o guiones y convertir a mayúsculas
  rut = rut.replace(/[.-]/g, '').toUpperCase();

  // Extraer el dígito verificador y el resto del número
  const rutDigits = rut.slice(0, -1);
  const digitoVerificador = rut.slice(-1);

  // Validar el formato
  const regexRut = /^\d{1,9}$/;
  if (!regexRut.test(rutDigits) || isNaN(digitoVerificador)) {
    return false;
  }

  // Calcular el dígito verificador
  let suma = 0;
  let multiplicador = 2;

  for (let i = rutDigits.length - 1; i >= 0; i--) {
    suma += parseInt(rutDigits.charAt(i)) * multiplicador;
    multiplicador = multiplicador === 7 ? 2 : multiplicador + 1;
  }

  const resto = suma % 11;
  const digitoCalculado = resto === 0 ? 0 : 11 - resto;

  // Comparar el dígito calculado con el proporcionado
  return digitoCalculado === parseInt(digitoVerificador);
}
function validarEmail(email) {
  // Expresión regular para validar el formato del correo electrónico
  var regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  
  // Verificamos que la cadena no esté vacía y cumpla con el formato
  return email !== "" && regex.test(email);
}

document.querySelectorAll('input[name="chk"]:checked');
SELECT r.idreserva, r.nombre, r.nombremascota, r.fecha, r.idhorario, r.recordatorio, h.descripcion FROM public.reserva
        LEFT JOIN public.horario h ON r.idhorario = h.idhorario;


        <label for="quantity">Ingrese un número (0-100):</label>
    <input type="number" id="quantity" name="quantity" min="0" max="100" pattern="[0-9]+" title="Ingrese un número válido">

    <button onclick="validateInput()">Validar</button>

    <script>
        function validateInput() {
            var inputField = document.getElementById("quantity");
            var value = inputField.value;

            if (value < 0 || value > 100) {
                alert("Por favor, ingrese un número entre 0 y 100.");
            } else {
                alert("Número válido: " + value);
            }
        }
    </script>


     if (isNaN(inputValue) || inputValue < 0) {
                alert("Por favor, ingrese un número positivo.");
                // Puedes limpiar el campo o tomar otra acción según tus necesidades
                inputField.value = "";
            }

LINE 1: SELECT COUNT(*)               FROM maraton WHERE nombre = _n...
                                           ^
QUERY:  SELECT COUNT(*)               FROM maraton WHERE nombre = _nombre AND idatleta = _idatleta
CONTEXT:  PL/pgSQL function "fn_insertar_maraton" line 16 at sentencia SQL    

CREATE OR REPLACE FUNCTION prueba.fn_insertar_maraton(
    IN _idmaraton integer,
    IN _nombre varchar,
    IN _descripcion varchar,
    IN _tiempocarrera integer,
    IN _idatleta integer,
    IN _porcentajeavance integer
)
RETURNS VARCHAR AS 
$body$
DECLARE
    __existe integer;
BEGIN
    -- Si _idmaraton es igual a 0, debemos agregar un nuevo id automáticamente
    IF _idmaraton = 0 THEN
        -- Verificar si ya existe una entrada con el mismo nombre e idatleta
        IF EXISTS (SELECT 1 FROM maraton WHERE nombre = _nombre AND idatleta = _idatleta) THEN
            RAISE EXCEPTION 'Entrada duplicada para nombre=% e idatleta=%', _nombre, _idatleta;
        ELSE
            -- Insertar nuevo registro
            INSERT INTO maraton(nombre, descripcion, tiempocarrera, idatleta, porcentajeavance)
            VALUES (_nombre, _descripcion, _tiempocarrera, _idatleta, _porcentajeavance);
            RETURN 'Insertado correctamente';  
        END IF;
    ELSE
        -- Si _idmaraton no es igual a 0, actualizar el registro existente
        SELECT COUNT(*) INTO __existe
        FROM maraton
        WHERE nombre = _nombre AND idatleta = _idatleta AND idmaraton <> _idmaraton;

        IF __existe <> 0 THEN
            RAISE EXCEPTION 'Los campos agregados ya existen';
        ELSE
            -- Actualizar el registro existente
            UPDATE maraton
            SET nombre = _nombre, descripcion = _descripcion, tiempocarrera = _tiempocarrera,
                idatleta = _idatleta, porcentajeavance = _porcentajeavance
            WHERE idmaraton = _idmaraton;
            
            RETURN 'Actualizado correctamente'; 
        END IF;
    END IF;
END;
$body$
LANGUAGE plpgsql;

ERROR:  no existe la relación «maraton»
LINE 1: SELECT EXISTS (SELECT 1 FROM maraton WHERE nombre = _nombre ...
                                     ^
QUERY:  SELECT EXISTS (SELECT 1 FROM maraton WHERE nombre = _nombre AND idatleta = _idatleta)
CONTEXT:  PL/pgSQL function "fn_insertar_maraton" line 7 at IF


ALTER TABLE maraton
ADD COLUMN nueva_columna INTEGER;
